// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: menu_items.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addMenuItemToMenu = `-- name: AddMenuItemToMenu :exec
INSERT INTO menus_menu_items (fk_menu_id, fk_menu_item_id) VALUES ($1, $2)
`

type AddMenuItemToMenuParams struct {
	FkMenuID     pgtype.UUID `json:"fk_menu_id"`
	FkMenuItemID pgtype.UUID `json:"fk_menu_item_id"`
}

func (q *Queries) AddMenuItemToMenu(ctx context.Context, arg AddMenuItemToMenuParams) error {
	_, err := q.db.Exec(ctx, addMenuItemToMenu, arg.FkMenuID, arg.FkMenuItemID)
	return err
}

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menu_items (name) VALUES ($1) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateMenuItem(ctx context.Context, name string) (MenuItem, error) {
	row := q.db.QueryRow(ctx, createMenuItem, name)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
DELETE FROM menu_items WHERE id = $1
`

func (q *Queries) DeleteMenuItem(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMenuItem, id)
	return err
}

const deleteMenuMenuItems = `-- name: DeleteMenuMenuItems :exec
DELETE FROM menus_menu_items WHERE  fk_menu_id = $1 AND fk_menu_item_id = $2
`

type DeleteMenuMenuItemsParams struct {
	FkMenuID     pgtype.UUID `json:"fk_menu_id"`
	FkMenuItemID pgtype.UUID `json:"fk_menu_item_id"`
}

func (q *Queries) DeleteMenuMenuItems(ctx context.Context, arg DeleteMenuMenuItemsParams) error {
	_, err := q.db.Exec(ctx, deleteMenuMenuItems, arg.FkMenuID, arg.FkMenuItemID)
	return err
}

const deleteMenuMenuItemsByMenuItem = `-- name: DeleteMenuMenuItemsByMenuItem :exec
DELETE FROM menus_menu_items WHERE fk_menu_item_id = $1
`

func (q *Queries) DeleteMenuMenuItemsByMenuItem(ctx context.Context, fkMenuItemID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteMenuMenuItemsByMenuItem, fkMenuItemID)
	return err
}

const deleteOrdersMenuItem = `-- name: DeleteOrdersMenuItem :exec
DELETE FROM orders_menu_items AS omi WHERE omi.fk_menu_item_id = $1
`

func (q *Queries) DeleteOrdersMenuItem(ctx context.Context, fkMenuItemID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrdersMenuItem, fkMenuItemID)
	return err
}

const getMenuItems = `-- name: GetMenuItems :many
SELECT id, name, created_at, updated_at FROM menu_items ORDER BY created_at DESC
`

func (q *Queries) GetMenuItems(ctx context.Context) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, getMenuItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuMenuItems = `-- name: GetMenuMenuItems :many
SELECT mi.id, mi.name, mi.created_at, mi.updated_at FROM menu_items AS mi
INNER JOIN menus_menu_items AS mmi
ON mmi.fk_menu_item_id = mi.id
WHERE mmi.fk_menu_id = $1
`

func (q *Queries) GetMenuMenuItems(ctx context.Context, fkMenuID pgtype.UUID) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, getMenuMenuItems, fkMenuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuMenuItemsByPublicId = `-- name: GetMenuMenuItemsByPublicId :many
SELECT mi.id, mi.name, mi.created_at, mi.updated_at FROM menu_items AS mi
INNER JOIN menus_menu_items AS mmi
ON mmi.fk_menu_item_id = mi.id
INNER JOIN menus AS m
ON m.id = mmi.fk_menu_id
WHERE m.public_id = $1
`

func (q *Queries) GetMenuMenuItemsByPublicId(ctx context.Context, publicID pgtype.Text) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, getMenuMenuItemsByPublicId, publicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
